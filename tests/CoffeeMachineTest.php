<?php

declare(strict_types=1);

namespace Tests;

use PHPUnit\Framework\TestCase;
use PHPUnit\Framework\Attributes\DataProvider;
use App\CoinCode;
use App\BrewerInterface;
use App\ChangeMachineInterface;

class CoffeeMachineTest extends TestCase
{
    private BrewerInterface $brewer;
    private ChangeMachineInterface $coinMachine;

    protected function setUp(): void
    {
        $this->brewer = $this->createMock(BrewerInterface::class);
        $this->coinMachine = $this->createMock(ChangeMachineInterface::class);
        echo "\nüîß Setup: Machine √† caf√© initialis√©e avec brewer et change machine mock√©s\n";
    }

    #[DataProvider('validCoinProvider')]
    public function testBrewerStartsWithValidCoin(CoinCode $coin): void
    {
        echo "\n‚òï TEST: Pi√®ce valide ({$coin->value} cents)\n";
        echo "√âTANT DONN√â une machine √† caf√©\n";
        echo "QUAND on ins√®re une pi√®ce de {$coin->value} cents (‚â• 50cts)\n";

        $this->brewer->expects($this->once())
            ->method('makeACoffee')
            ->willReturn(true);

        if ($coin->value >= 50) {
            echo "ALORS le brewer re√ßoit l'ordre de faire un caf√© ‚úÖ\n";
            $this->brewer->makeACoffee();
        }

        echo "‚úÖ Test r√©ussi pour {$coin->value} cents\n";
    }

    public static function validCoinProvider(): array
    {
        return [
            'fifty cents' => [CoinCode::FIFTY_CENTS],
            'one euro' => [CoinCode::ONE_EURO],
            'two euros' => [CoinCode::TWO_EUROS],
        ];
    }

    #[DataProvider('invalidCoinProvider')]
    public function testBrewerNotStartedWithInvalidCoin(CoinCode $coin): void
    {
        echo "\n‚ùå TEST: Pi√®ce invalide ({$coin->value} cents)\n";
        echo "√âTANT DONN√â une machine √† caf√©\n";
        echo "QUAND on ins√®re une pi√®ce de {$coin->value} cents (< 50cts)\n";

        $this->brewer->expects($this->never())
            ->method('makeACoffee');

        $this->coinMachine->expects($this->once())
            ->method('flushStoredMoney');

        if ($coin->value < 50) {
            echo "ALORS le brewer ne re√ßoit pas d'ordre ‚ùå\n";
            echo "ET l'argent est restitu√© üí∞\n";
            $this->coinMachine->flushStoredMoney();
        }

        echo "‚úÖ Test r√©ussi pour {$coin->value} cents - argent restitu√©\n";
    }

    public static function invalidCoinProvider(): array
    {
        return [
            'one cent' => [CoinCode::ONE_CENT],
            'two cents' => [CoinCode::TWO_CENTS],
            'five cents' => [CoinCode::FIVE_CENTS],
            'ten cents' => [CoinCode::TEN_CENTS],
            'twenty cents' => [CoinCode::TWENTY_CENTS],
        ];
    }

    #[DataProvider('validCoinProvider')]
    public function testMoneyRefundedOnMachineFailure(CoinCode $coin): void
    {
        echo "\nüîß TEST: Machine d√©faillante avec pi√®ce de {$coin->value} cents\n";
        echo "√âTANT DONN√â une machine √† caf√© d√©faillante\n";
        echo "QUAND on ins√®re une pi√®ce de {$coin->value} cents (‚â• 50cts)\n";

        $this->brewer->expects($this->once())
            ->method('makeACoffee')
            ->willReturn(false);

        $this->coinMachine->expects($this->once())
            ->method('flushStoredMoney');

        if ($coin->value >= 50) {
            echo "Le brewer tente de faire un caf√©... ‚òï\n";
            $success = $this->brewer->makeACoffee();
            if (!$success) {
                echo "ALORS l'argent est restitu√© (machine d√©faillante) üí∞‚ùå\n";
                $this->coinMachine->flushStoredMoney();
            }
        }

        echo "‚úÖ Test r√©ussi - argent restitu√© suite √† d√©faillance\n";
    }

    public function testNoActionWithoutCoin(): void
    {
        echo "\n‚≠ï TEST: Aucune pi√®ce ins√©r√©e\n";
        echo "√âTANT DONN√â une machine √† caf√©\n";
        echo "QUAND aucune pi√®ce n'est ins√©r√©e\n";
        echo "ALORS le brewer ne re√ßoit pas d'ordre ‚ùå\n";
        echo "ET aucun argent n'est restitu√©\n";

        $this->brewer->expects($this->never())
            ->method('makeACoffee');

        $this->coinMachine->expects($this->never())
            ->method('flushStoredMoney');

        echo "‚úÖ Test r√©ussi - aucune action sans pi√®ce\n";
    }

    public function testTwoValidCoinsTriggerTwoCoffees(): void
    {
        echo "\n‚òï‚òï TEST: Deux pi√®ces de 50cts\n";
        echo "√âTANT DONN√â une machine √† caf√©\n";
        echo "QUAND on ins√®re une pi√®ce de 50cts deux fois\n";
        echo "ALORS le brewer re√ßoit deux fois l'ordre de faire un caf√©\n";

        $this->brewer->expects($this->exactly(2))
            ->method('makeACoffee')
            ->willReturn(true);

        echo "Insertion premi√®re pi√®ce... ‚òï\n";
        $this->brewer->makeACoffee();

        echo "Insertion deuxi√®me pi√®ce... ‚òï\n";
        $this->brewer->makeACoffee();

        echo "‚úÖ Test r√©ussi - deux caf√©s command√©s\n";
    }
}